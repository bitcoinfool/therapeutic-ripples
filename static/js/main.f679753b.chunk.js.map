{"version":3,"sources":["RippleCanvas.js","App.js","reportWebVitals.js","index.js"],"names":["RippleCanvas","canvasRef","useRef","ripplesRef","particlesRef","audioContextRef","lastChimeFrequencyRef","useEffect","current","window","AudioContext","webkitAudioContext","canvas","ctx","getContext","setCanvasSize","width","innerWidth","height","innerHeight","fillStyle","fillRect","addEventListener","playAmbientMusic","audioCtx","ambientOsc","createOscillator","type","frequency","setValueAtTime","currentTime","ambientGain","createGain","gain","connect","destination","start","addRipple","x","y","variation","offsetX","Math","random","offsetY","randomRadius","push","startTime","performance","now","maxRadius","handleClick","e","rect","getBoundingClientRect","clientX","left","clientY","top","i","playChime","oscillator","harmonicMultipliers","multiplier","floor","length","frequencies","gainNode","linearRampToValueAtTime","delay","createDelay","delayTime","value","echoGain","stop","animate","hue","bgGradient","createLinearGradient","addColorStop","globalCompositeOperation","vx","vy","size","creationTime","lifetime","p","age","alpha","max","beginPath","arc","PI","fill","splice","ripple","progress","radius","opacity","lineWidth","innerEdge","outerEdge","gradient","createRadialGradient","strokeStyle","stroke","requestAnimationFrame","removeEventListener","React","createElement","ref","style","display","App","className","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.f679753b.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\r\n\r\nconst RippleCanvas = () => {\r\n  const canvasRef = useRef(null);\r\n  const ripplesRef = useRef([]);\r\n  const particlesRef = useRef([]);\r\n  const audioContextRef = useRef(null);\r\n  const lastChimeFrequencyRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Create AudioContext.\r\n    audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\r\n\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    // Set canvas dimensions.\r\n    const setCanvasSize = () => {\r\n      canvas.width = window.innerWidth;\r\n      canvas.height = window.innerHeight;\r\n      ctx.fillStyle = 'black';\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n    };\r\n    setCanvasSize();\r\n    window.addEventListener('resize', setCanvasSize);\r\n\r\n    // Ambient background music: a gentle drone.\r\n    const playAmbientMusic = () => {\r\n      const audioCtx = audioContextRef.current;\r\n      const ambientOsc = audioCtx.createOscillator();\r\n      ambientOsc.type = 'sine';\r\n      ambientOsc.frequency.setValueAtTime(55, audioCtx.currentTime);\r\n      const ambientGain = audioCtx.createGain();\r\n      ambientGain.gain.setValueAtTime(0.03, audioCtx.currentTime);\r\n      ambientOsc.connect(ambientGain);\r\n      ambientGain.connect(audioCtx.destination);\r\n      ambientOsc.start();\r\n    };\r\n    playAmbientMusic();\r\n\r\n    // Add a ripple with random variation in maximum radius.\r\n    const addRipple = (x, y, variation) => {\r\n      const offsetX = (Math.random() - 0.5) * 20;\r\n      const offsetY = (Math.random() - 0.5) * 20;\r\n      // Randomize base maxRadius between 900 and 1100.\r\n      const randomRadius = Math.random() * 200 + 900;\r\n      ripplesRef.current.push({\r\n        x: x + offsetX,\r\n        y: y + offsetY,\r\n        startTime: performance.now(),\r\n        maxRadius: randomRadius + variation * 50,\r\n      });\r\n    };\r\n\r\n    // Play a soft chime with enhanced (echo) sound effects.\r\n    const playChime = () => {\r\n      const audioCtx = audioContextRef.current;\r\n      const oscillator = audioCtx.createOscillator();\r\n      oscillator.type = 'sine';\r\n\r\n      // With 50% chance, harmonize with the last chime; otherwise, choose a random therapeutic frequency.\r\n      let frequency;\r\n      if (lastChimeFrequencyRef.current && Math.random() < 0.5) {\r\n        const harmonicMultipliers = [1, 1.25, 1.5, 0.8, 0.67];\r\n        const multiplier = harmonicMultipliers[Math.floor(Math.random() * harmonicMultipliers.length)];\r\n        frequency = lastChimeFrequencyRef.current * multiplier;\r\n      } else {\r\n        const frequencies = [396, 417, 432, 528, 639, 741, 852];\r\n        frequency = frequencies[Math.floor(Math.random() * frequencies.length)];\r\n      }\r\n      lastChimeFrequencyRef.current = frequency;\r\n      oscillator.frequency.setValueAtTime(frequency, audioCtx.currentTime);\r\n\r\n      const gainNode = audioCtx.createGain();\r\n      // Quick attack, then fade out over 4.5 seconds.\r\n      gainNode.gain.setValueAtTime(0, audioCtx.currentTime);\r\n      gainNode.gain.linearRampToValueAtTime(0.3, audioCtx.currentTime + 0.1);\r\n      gainNode.gain.linearRampToValueAtTime(0.001, audioCtx.currentTime + 4.5);\r\n\r\n      // Add a subtle echo effect using a DelayNode.\r\n      const delay = audioCtx.createDelay();\r\n      delay.delayTime.value = 0.2;\r\n      const echoGain = audioCtx.createGain();\r\n      echoGain.gain.value = 0.1;\r\n\r\n      oscillator.connect(gainNode);\r\n      gainNode.connect(audioCtx.destination);\r\n      gainNode.connect(delay);\r\n      delay.connect(echoGain);\r\n      echoGain.connect(audioCtx.destination);\r\n\r\n      oscillator.start();\r\n      oscillator.stop(audioCtx.currentTime + 4.5);\r\n    };\r\n\r\n    // On click, add three ripples and play the chime.\r\n    const handleClick = (e) => {\r\n      const rect = canvas.getBoundingClientRect();\r\n      const x = e.clientX - rect.left;\r\n      const y = e.clientY - rect.top;\r\n      for (let i = 0; i < 3; i++) {\r\n        addRipple(x, y, i);\r\n      }\r\n      playChime();\r\n    };\r\n    canvas.addEventListener('click', handleClick);\r\n\r\n    // Animation loop.\r\n    const animate = () => {\r\n      const currentTime = performance.now();\r\n\r\n      // Create a dynamic, evolving background gradient.\r\n      const hue = (currentTime / 50) % 360;\r\n      const bgGradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);\r\n      bgGradient.addColorStop(0, `hsl(${hue}, 50%, 5%)`);\r\n      bgGradient.addColorStop(1, `hsl(${(hue + 60) % 360}, 50%, 10%)`);\r\n      ctx.globalCompositeOperation = 'source-over';\r\n      ctx.fillStyle = bgGradient;\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n      // Overlay with a translucent black for subtle trails.\r\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n      // Update and draw subtle particles.\r\n      if (Math.random() < 0.02) {\r\n        particlesRef.current.push({\r\n          x: Math.random() * canvas.width,\r\n          y: Math.random() * canvas.height,\r\n          vx: (Math.random() - 0.5) * 0.5,\r\n          vy: (Math.random() - 0.5) * 0.5,\r\n          size: Math.random() * 2 + 1,\r\n          creationTime: currentTime,\r\n          lifetime: 8000,\r\n        });\r\n      }\r\n      for (let i = particlesRef.current.length - 1; i >= 0; i--) {\r\n        const p = particlesRef.current[i];\r\n        const age = currentTime - p.creationTime;\r\n        const alpha = Math.max(1 - age / p.lifetime, 0);\r\n        p.x += p.vx;\r\n        p.y += p.vy;\r\n        ctx.beginPath();\r\n        ctx.arc(p.x, p.y, p.size, 0, Math.PI * 2);\r\n        ctx.fillStyle = `rgba(255, 255, 255, ${alpha * 0.05})`;\r\n        ctx.fill();\r\n        if (age > p.lifetime) {\r\n          particlesRef.current.splice(i, 1);\r\n        }\r\n      }\r\n\r\n      // Draw the expanding ripples.\r\n      ctx.globalCompositeOperation = 'lighter';\r\n      for (let i = ripplesRef.current.length - 1; i >= 0; i--) {\r\n        const ripple = ripplesRef.current[i];\r\n        const elapsed = currentTime - ripple.startTime;\r\n        const progress = elapsed / 4500; // 4.5-second duration.\r\n        const radius = progress * ripple.maxRadius;\r\n        const opacity = Math.max(1 - progress, 0);\r\n\r\n        const lineWidth = 20;\r\n        const innerEdge = Math.max(radius - lineWidth / 2, 0);\r\n        const outerEdge = radius + lineWidth / 2;\r\n        const gradient = ctx.createRadialGradient(\r\n          ripple.x,\r\n          ripple.y,\r\n          innerEdge,\r\n          ripple.x,\r\n          ripple.y,\r\n          outerEdge\r\n        );\r\n        gradient.addColorStop(0, `rgba(255, 255, 255, ${opacity * 0.1})`);\r\n        gradient.addColorStop(1, `rgba(255, 255, 255, 0)`);\r\n\r\n        ctx.lineWidth = lineWidth;\r\n        ctx.strokeStyle = gradient;\r\n        ctx.beginPath();\r\n        ctx.arc(ripple.x, ripple.y, radius, 0, Math.PI * 2);\r\n        ctx.stroke();\r\n\r\n        if (progress >= 1) {\r\n          ripplesRef.current.splice(i, 1);\r\n        }\r\n      }\r\n\r\n      requestAnimationFrame(animate);\r\n    };\r\n\r\n    animate();\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', setCanvasSize);\r\n      canvas.removeEventListener('click', handleClick);\r\n    };\r\n  }, []);\r\n\r\n  return <canvas ref={canvasRef} style={{ display: 'block' }} />;\r\n};\r\n\r\nexport default RippleCanvas;\r\n","import React from 'react';\nimport RippleCanvas from './RippleCanvas';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RippleCanvas />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}